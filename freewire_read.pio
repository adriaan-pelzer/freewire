.program freewire_read

.wrap_target

_check_initial_digit:
  jmp pin _read_one
  jmp _read_zero

_read_one:
  set x 31
_decrement_one:
  jmp x-- _next_one
_next_one:
  ;nop
  jmp pin _decrement_one

_send_one:
  mov isr x
  push

_read_zero:
  set y 15
  ;nop
_decrement_zero:
  jmp y-- _next_zero

_send_end:
  mov isr y
  push

_wait_one:
  wait 1 pin 0
  jmp _read_one

_next_zero:
  jmp pin _send_zero
  jmp _decrement_zero

_send_zero:
  mov isr y
  push

.wrap

% c-sdk {
static inline void freewire_read_program_init(PIO pio, uint sm, uint offset, uint pin) {
  float clock_divider = (float) clock_get_hz(clk_sys) / 1000000.0f;

  pio_gpio_init(pio, pin);
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
  pio_sm_config c = freewire_read_program_get_default_config(offset);
  sm_config_set_jmp_pin(&c, pin);
  sm_config_set_in_pins(&c, pin);
  sm_config_set_in_shift(&c, false, true, 32);
  sm_config_set_clkdiv(&c, clock_divider);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, true);
}
%}
